let CONTEXT="2d",WHITE=[255,255,255,255],BLACK=[0,0,0,255];class Canvas{constructor(a,t,e,i,n=4){this.width=a,this.height=t,this.cellSize=e,this.totalCellWidth=this.width/this.cellSize,this.totalCellHeight=this.height/this.cellSize,this.aliasDim=n,this.canvas=document.getElementById(i),this.canvas.width=this.width,this.canvas.height=this.height,this.ctx=this.canvas.getContext(CONTEXT),this.buffer=Array.from({length:t},()=>Array.from({length:a},()=>WHITE)),this.init()}init(){for(let t=0;t<this.height;t+=this.cellSize)for(let a=0;a<this.width;a+=this.cellSize)this.buffer[t][a]=BLACK;this.putImage()}putImage(){var a=this.ctx.createImageData(this.width,this.height),e=a.data;for(let t=0;t<this.height;t++)for(let a=0;a<this.width;a++){var[i,n,l,r]=this.buffer[t][a],c=4*(t*this.width+a);e[c]=i,e[1+c]=n,e[2+c]=l,e[3+c]=r}this.ctx.putImageData(a,0,0)}fillPixel(a,t,e){var i=t*this.cellSize,n=a*this.cellSize;for(let t=i;t<=i+this.cellSize&&t<this.height;t++)for(let a=n;a<=n+this.cellSize&&a<this.width;a++)this.buffer[t][a]=e}}function isGradient(a){if(a&&"object"==typeof a){if("linear"===a.type||"radial"===a.type)return!0;Array.isArray(a)&&4===a.length&&a.every(a=>"number"==typeof a)||console.error("Invalid fill format.")}return!1}function createLinearGradient(a,t,e="x"){return{type:"linear",colorStart:a,colorEnd:t,axis:e}}function createRadialGradient(a,t,e,i){return{type:"radial",colorStart:a,colorEnd:t,center:e,radius:i}}function computeTLinear(a,t,e){return t===e||a<=t?0:e<=a?1:(a-t)/(e-t)}function computeTRadial(a,t,e,i,n){a-=e,e=t-i,t=Math.sqrt(a*a+e*e);return 0===n?0:Math.min(1,t/n)}function interpolateColor(a,t,e){return[Math.round(a[0]+(t[0]-a[0])*e),Math.round(a[1]+(t[1]-a[1])*e),Math.round(a[2]+(t[2]-a[2])*e),Math.round(a[3]+(t[3]-a[3])*e)]}function computeT(a,t,e,i){var n,l;return"linear"===e.type?"y"===e.axis?([l,n]=i,computeTLinear(t,l,n)):([l,n]=i,computeTLinear(a,l,n)):"radial"===e.type?([i,l]=e.center,computeTRadial(a,t,i,l,e.radius)):(console.error("Unknown gradient type:",e.type),0)}function antiAliasDraw(l,r,c,s,o,a){var h=isGradient(a),u=h?a:null;for(let n=l;n<=r;n++)for(let i=c;i<=s;i++){let e=0;for(let t=0;t<canvas.aliasDim;t++)for(let a=0;a<canvas.aliasDim;a++)o([(n+(t+.5)/canvas.aliasDim)*canvas.cellSize,(i+(a+.5)/canvas.aliasDim)*canvas.cellSize])&&(e+=1);if(0!==(e/=canvas.aliasDim*canvas.aliasDim)){let t;if(h){let a;var v=computeT((n+.5)*canvas.cellSize,(i+.5)*canvas.cellSize,u,a="linear"===u.type?"y"===u.axis?[c*canvas.cellSize,s*canvas.cellSize]:[l*canvas.cellSize,r*canvas.cellSize]:a);t=interpolateColor(u.colorStart,u.colorEnd,v)}else t=[...a];t[3]*=e,canvas.fillPixel(n,i,t)}}canvas.putImage()}function checkCoordinatesInBounds(t){for(let a=0;a<t.length;a++){var[e,i]=t[a];if(e>canvas.totalCellWidth||i>canvas.totalCellHeight)return!0}return!1}function isPointInArc(a,t,e,i,n,l){var[a,r]=a,[t,c]=t,a=a-t,t=r-c;if(1<a*a/(e*e)+t*t/(i*i))return!1;let s=Math.atan2(t,a);return s<0&&(s+=2*Math.PI),n<l?n<=s&&s<=l:s>=n||s<=l}function drawArc(a,t,e,i,n,l,r){let c=[a*canvas.cellSize,t*canvas.cellSize],s=e*canvas.cellSize,o=i*canvas.cellSize;antiAliasDraw(a-e,a+e,t-i,t+i,a=>isPointInArc(a,c,s,o,n,l),r)}function drawEllipse(a,t,e,i,n){drawArc(a,t,e,i,0,2*Math.PI,n)}function drawCircle(a,t,e,i){drawEllipse(a,t,e,e,i)}function drawLine(a,t,i,n,l){var r=a*canvas.cellSize,a=t*canvas.cellSize,t=i*canvas.cellSize,i=n*canvas.cellSize,n=t-r,c=i-a,s=isGradient(l),e=s?l:null,o=s?e.colorStart:null,h=s?e.colorEnd:null;if(0==n){var[u,v]=a<i?[a,i]:[i,a];let e=v-u||1;for(let t=u;t<=v;t++)if(0<=r&&r<canvas.width&&0<=t&&t<canvas.height){let a;a=s?interpolateColor(o,h,(t-u)/e):[...l],canvas.buffer[t][r]=a}void canvas.putImage()}else{var f=c/n,d=a-f*r,[g,S]=r<t?[r,t]:[t,r];let e=S-g||1;for(let t=g;t<=S;t++){var m=Math.round(f*t+d);if(0<=t&&t<canvas.width&&0<=m&&m<canvas.height){let a;a=s?interpolateColor(o,h,(t-g)/e):[...l],canvas.buffer[m][t]=a}}canvas.putImage()}}function isPointInPolygon(a,t,e){var[i,n]=a,[a,e,l,r]=e;if(i<a||e<i||n<l||r<n)return!1;let c=!1,s=0,o=t.length-1;for(;s<t.length;o=s++){var[h,u]=t[s],[v,f]=t[o];n<u!=n<f&&i<(v-h)*(n-u)/(f-u)+h&&(c=!c)}return c}function getBoundingBox(t){let e=t[0][0],i=t[0][0],n=t[0][1],l=t[0][1];for(let a=1;a<t.length;a++){var[r,c]=t[a];e=Math.min(r,e),i=Math.max(r,i),n=Math.min(c,n),l=Math.max(c,l)}return[e,i,n,l]}function drawPolygon(a,t){var e=getBoundingBox(a);let i=a.map(([a,t])=>[a*canvas.cellSize,t*canvas.cellSize]),n=getBoundingBox(i);antiAliasDraw(e[0],e[1],e[2],e[3],a=>isPointInPolygon(a,i,n),t)}function drawRectangle(a,t,e,i,n){var l,r=a*canvas.cellSize,c=t*canvas.cellSize,s=(a+e)*canvas.cellSize,o=(t+i)*canvas.cellSize,h=isGradient(n);for(let e=r;e<=s;e++)for(let t=c;t<=o;t++)if(0<=e&&e<canvas.width&&0<=t&&t<canvas.height){let a;a=h?(l="y"===n.axis?[c,o]:[r,s],l=computeT(e,t,n,l),interpolateColor(n.colorStart,n.colorEnd,l)):[...n],canvas.buffer[t][e]=a}canvas.putImage()}function drawSquare(a,t,e,i){drawRectangle(a,t,e,e,i)}function isPointInTriangle(a,t,e,i){var[a,n]=a,[t,l]=t,[e,r]=e,[i,c]=i,s=(r-c)*(t-i)+(i-e)*(l-c),r=((r-c)*(a-i)+(i-e)*(n-c))/s,e=((c-l)*(a-i)+(t-i)*(n-c))/s;return 0<=r&&0<=e&&0<=1-r-e}function drawTriangle(a,t,e,i,n,l,r){checkCoordinatesInBounds([[a,t],[e,i],[n,l]])&&console.error("Triangle exceeds canvas bounds.");let c=[a*canvas.cellSize,t*canvas.cellSize],s=[e*canvas.cellSize,i*canvas.cellSize],o=[n*canvas.cellSize,l*canvas.cellSize];antiAliasDraw(Math.min(a,e,n),Math.max(a,e,n),Math.min(t,i,l),Math.max(t,i,l),a=>isPointInTriangle(a,c,s,o),r)}